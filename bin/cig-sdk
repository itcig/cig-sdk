#!/usr/bin/env ruby
require 'open3'
require 'yaml'
require 'json'

class DevTool
  VERSION = '0.9.0'
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  cig [options] [COMMAND] [ARGS...]"
  cig -h|--help

Commands:
  cleanup            Deletes stopped docker containers, images and volumes
  down               Stop project containers
  exec               Run command inside a running project container by passing the docker-compose service name followed by the command.
  help               Get help on a command
  logs               View output from project containers
  pause              Pause containers and free up resources
  reload             Restart and build all project containers
  restart            Restart project containers
  self               Manage this CLI tool
  service            Manage installed cig-sdk Docker services (nginx and dnsmasq, mail)
  shell              Open shell inside running project container. Defaults to docker-compose `web` service and bash or pass the service name and shell application name as the next argument(s)).  
  unpause            Wake the project up from paused state
  up                 Create and start project containers
  version            Show cig-sdk version

HEREDOC

  PROXY_UNMODIFIED_TO_COMPOSE=%w{down pause unpause}
  PROXY_MODIFIED=%w{logs up run help}
  OTHER_COMMANDS=%w{wait reload restart cleanup service status shell exec version self}

  CIG_SDK_DIR=File.expand_path('..', __dir__)
  CIG_SDK_USER_FILES=File.join(Dir.home,'.cig-sdk')

  def initialize(args)
    # Check if config files exists and is on correct version
    if(!File.exist?("#{CIG_SDK_USER_FILES}/config"))
      puts "Config not found, running setup..."

      send(:self, ['init'])
    end

    if PROXY_UNMODIFIED_TO_COMPOSE.include?(args[0])
      system(args.unshift("docker-compose").join(" "))
    elsif PROXY_MODIFIED.include?(args[0])
      send(args[0].to_sym, args)
    elsif OTHER_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      puts MAIN_HELP_BANNER
    end
  end

  def version(args)
    puts "CIG SDK #{VERSION}"
  end

  # Show docker-compose command helpers for original commands
  def help(args)
    if args.size > 1
      if (PROXY_UNMODIFIED_TO_COMPOSE.include?(args[1]) or PROXY_MODIFIED.include?(args[1]))
        args.unshift("docker-compose")
        system(args.join(" "))
      elsif OTHER_COMMANDS.include?(args[1])
        puts("This is a cig-sdk custom command and not part of docker-compose. See wiki for explanation.")
      end
    else
      puts MAIN_HELP_BANNER
    end
  end

  def logs(args)
    args.push("-f")
    args.unshift("docker-compose")

    system(args.join(" "))
  end

  def reload(args)
    # Start services if not running
    service(["up"])

    args.unshift("-d")
    args.unshift("--build")
    args.unshift("--force-recreate")
    args.unshift("up")
    args.unshift("docker-compose")

    system(args.join(" "))

  end

  def cleanup(args)

    if args.include?('--images')

        puts "Removing all unused docker images..."
        images = `docker images -q`.gsub("\n",' ')

        system "docker rmi #{images}" if $?.success? and not images.empty?

    elsif args.empty?

        puts "Removing exited docker containers..."

        containers = `docker ps -a -q -f status=exited`.gsub("\n",' ')

        system "docker rm -v #{containers}" if $?.success? and not containers.empty?

        puts "Removing dangling docker images..."

        images = `docker images -f 'dangling=true' -q`.gsub("\n",' ')

        system "docker rmi #{images}" if $?.success? and not images.empty?

        puts "Removing dangling docker volumes..."

        volumes = `docker volume ls -qf dangling=true`.gsub("\n",' ')

        system "docker volume rm #{volumes}" if $?.success? and not volumes.empty?

    end

  end

  def up(args)
    # Start services if not running
    service(["up"])

    args.insert(1, "-d")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  # Restart containers without rebuilding images
  def restart(args)
    # Start services if not running
    service(["up"])

    args.unshift("-d")
    args.unshift("--force-recreate")
    args.unshift("up")
    args.unshift("docker-compose")
    
    system(args.join(" "))
  end

  # open shell into container, default to web and bash
  def shell(args)
    if(!args[0])
      args[0] = 'web'      
    end

    if (!args[1])
      args[1] = 'bash'
    end 

    # Execute the given shell on the specified docker-compose service
    exec(args)
  end

  # Run command in project container
  def exec(args)
    target = args[0]
    args.delete_at(0)

    # Get the Id of the container
    container=`docker-compose ps -q #{target}`.strip
    system "docker exec -it #{container} #{args.join(' ')}"
  end

  def service(args)
    @service_help_banner = <<~HEREDOC
        Manage installed cig-sdk Docker services (nginx and dnsmasq, mail)

        Usage:
          cig service [options] [COMMAND] [ARGS...]"
          cig service -h|--help

        Commands:
          logs               Tail the output from service containers
          restart            Restart and build all service containers
          start              Start all service containers
          stop               Stop all service containers

        HEREDOC

    if (args[0] == "logs")
      args.push("-f")
    elsif (args[0] == "restart")      
      args[0] = "up"

      args.push("-d")
      args.push("--build")
      args.push("--force-recreate")
    elsif (args[0] == "up")
      should_stop_apache = true

      args.push("-d")
    elsif (args[0] == "down")
      should_start_apache = true
    elsif (args[0].nil? || args[0] == "--help")
      no_command_given = true
    end
    
    # Tell about custom commands if help view was shown
    if (no_command_given)
      puts @service_help_banner
    else 
      args.unshift("docker-compose", "-f #{CIG_SDK_DIR}/docker/services.yml", "-p cig")
      
      # If linux, set ip, otherwise assume user is on mac os x
      if RUBY_PLATFORM.include? "linux"
        box_ip="172.17.0.1"
      else
        box_ip="10.254.254.254"
      end

      # Stop Apache before starting Docker services 
      if (should_stop_apache)
        system("sudo apachectl stop")
      end

      # Set system variables which we can use in our templates
      system({"BOX_IP" => box_ip},args.join(" "))

      # Start Apache after tearing down Docker services 
      if (should_start_apache)
        system("sudo apachectl start")
      end
    end
  end

  # Syntactic sugar for: $ cig ps
  # I want this to look like vagrant binary
  def status(args)
    system("docker-compose ps")
  end

  def self(args) 
    @self_help_banner = <<~HEREDOC
    Manage this CLI tool

    Usage:
      cig self [options] [COMMAND] [ARGS...]"
      cig self -h|--help

    Commands:
      init               Runs bootstrap installation script on initial load. This is 
                         called automatically if the SDK has never been set up.
      update             Reload all service containers

    HEREDOC

    if (args[0] == "init")
      if RUBY_PLATFORM.include? "linux"
        system("cd #{CIG_SDK_DIR} && setup/ubuntu --cig-sdk #{CIG_SDK_DIR}")
      else
        system("cd #{CIG_SDK_DIR} && setup/bootstrap --cig-sdk #{CIG_SDK_DIR}")
      end

      puts "\n\n"
      puts "**********************************************"
      puts "***                                        ***"
      puts "***  \e[32mCIG SDK installed and ready to rock!\e[0m  ***"
      puts "***                                        ***"
      puts "**********************************************"
      puts "\n\n"

    elsif (args[0] == "update")       
      if RUBY_PLATFORM.include? "linux"
        system("cd #{CIG_SDK_DIR} && setup/ubuntu --cig-sdk #{CIG_SDK_DIR}")
      else
        system("cd #{CIG_SDK_DIR} && setup/bootstrap --cig-sdk #{CIG_SDK_DIR}")
      end

      # Rebuild and reload all services
      puts "Refreshing all cig-sdk services..."
      service(['reload'])

    elsif (args[0].nil? || args[0] == "--help")
      puts @self_help_banner
    end
  end

  def get_defaults(type)
    defaults = Hash.new
    if File.exist?(ENV['HOME']+'/.cig-sdk/config')
      config = File.read(ENV['HOME']+"/.cig-sdk/config")
      defaults = config['defaults']
    end
    return defaults
  end
end

DevTool.new(ARGV) if __FILE__==$0
