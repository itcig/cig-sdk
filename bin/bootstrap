#!/usr/bin/env bash

# We need at least ansible 2.0 for blockinfile directive
ANSIBLE_NEEDED="2.0"

# Only OS X yosemite and later support xhyve
OSX_NEEDED="10.10.0"

# This is fork from original
REPO='itcig/cig-sdk'

# Root SDK directory installed (will be replaced by Homebrew install)
CIG_SDK_DIR=${CIG_SDK_DIR:-"$(pwd)"}

usage() {
  cat - <<-EOF
    usage: $0 [...options]

    OPTIONS:
        --cig-sdk         The path to the SDK root folder
EOF
  exit 1
}

set_option() {
  local optarg=$1
  local optval=$2

  # For debugging
  # echo "Parsing Option: $optarg / $optval"  >&2

  # If argument has an '=' sign then parse the `optarg` by splitting on the equals
  if [[ "$optarg" == *"="* ]]; then
    # Remove smallest prefix of expansion matching pattern "*=" (e.g. get the piece after the "=" sign)
    val=${optarg#*=}

    # Remove smallest suffix of expansion matching pattern "*=" (e.g. get the chunk before the "=" sign)
    # Used for debugging
    # opt=${optarg%=$val}

  # Othewise assume the option value comes after and use the `optval`
  else
    val="${optval}"

    # Used for debugging
    # opt=$optarg
  fi

  # For debugging
  # echo "Setting option: '--${opt}', value: '${val}'" >&2
  # echo  >&2

  echo "$val"
}

load_options() {
  # Options that take a value are separated by a colon with flags coming after the last colon
  while getopts ":-:d" opt; do
    # Reset bool that says if an argument is a flag with no value
    is_flag=0

    case $opt in
    -)
      case "${OPTARG}" in
      cig-sdk | cig-sdk=*)
        CIG_SDK_DIR=$(set_option $OPTARG ${!OPTIND})
        ;;

      debug) # Flag
        echo "Running in DEBUG mode"
        is_flag=1
        DEBUG=1
        ;;

      help) # Flag
        usage
        exit 2
        ;;

      *)
        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
          echo "Invalid argument: --${OPTARG}" >&2
        fi
        ;;
      esac

      # If arguments takes a value, increment argument index for arguments not attached with an equals sign
      # Otherwise the entire string including the opt and val are seen as 1 item and no need to increment
      # almost like a flag
      if [ "$is_flag" != "1" ] && [[ ${OPTARG} != *"="* ]]; then
        OPTIND=$(($OPTIND + 1))
      fi
      ;;

    d)
      echo "Running in DEBUG mode"
      DEBUG=1
      ;;

    h)
      usage
      exit 2
      ;;
    *)
      if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
        echo "Invalid argument: '-${opt}'" >&2
      fi
      ;;
    esac
  done

  # Shift the args so we can grab the remaining positional params after the arguments have been run
  shift "$((OPTIND - 1))"
}

# Returns 1 if upgrade is needed
# $1 - SYSTEM VERSION
# $2 - NEEDED VERSION
update_needed() {
  highest_version=$(printf "%s\n%s" "$1" "$2" | sort -t '.' -k 1,1 -k 2,2 -k 3,3 -g | sed -n 2p)
  if [ "$highest_version" != "$2" ]; then
    return 1
  else
    return 0
  fi
}

# Returns 1 if not enough disk space
# $1 disk space needed in gb
free_disk_space() {
  local needed_gb=$1
  local available_gb
  available_gb=$(df -g / | tail -n 1 | xargs echo | cut -d' ' -f4)

  echo "Available disk space: ${available_gb}gb"

  if [ "$needed_gb" -ge "$available_gb" ]; then
    return 1
  else
    return 0
  fi
}

main() {

  load_options "$@"

  # Check that OS X is current enough
  which -s sw_vers
  if [[ $? != 0 ]]; then
    echo "ERROR: This is only supported with OS X. What system are you using?"
    exit 1
  else
    echo "CHECK: Minimum OS-X version needed: $OSX_NEEDED"
    OSX_VERSION=$(sw_vers -productVersion)

    if update_needed "$OSX_VERSION" "$OSX_NEEDED"; then
      echo "ERROR: You need to update your OS X, it is only $OSX_VERSION"
      exit 1
    else
      echo "OK: OS X version is sufficient ($OSX_VERSION)..."
    fi
  fi

  # Check if computer supports hypervisor framework
  echo "CHECK: hypervisor framework needs to be enabled in your computer"
  sysctl kern.hv_support
  if [[ $? != 0 ]]; then
    echo "ERROR: Your computer is too old to support xhyve"
    exit 1
  fi

  ## Install or Update Homebrew ##
  echo 'Installing or Updating Homebrew...'
  which -s brew
  if [[ $? != 0 ]]; then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    brew update
  fi
  echo -e "\n\n"

  ## Install or Update Ansible ##
  echo 'Installing or Updating Ansible...'
  which -s ansible-playbook
  if [[ $? != 0 ]]; then
    echo "ansible installation..."
    brew install ansible
  else # Ansible needs to be at least 1.9
    ANSIBLE_VERSION=$(ansible --version | grep core | sed -nE 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')
    if update_needed "$ANSIBLE_VERSION" "$ANSIBLE_NEEDED"; then
      echo "Ansible is too old: $ANSIBLE_VERSION. We need >$ANSIBLE_NEEDED"
      echo "Updating ansible through homebrew..."
      brew upgrade ansible
      brew link --overwrite ansible
    else
      echo "Ansible version is $ANSIBLE_VERSION. Update not needed..."
    fi
  fi
  echo -e "\n\n"

  ## Install Docker-Sync
  # echo 'Installing Docker-Sync...'
  # which -s docker-sync
  # if [[ $? != 0 ]]; then
  #   gem install -n /usr/local/bin docker-sync
  # else
  #   gem update docker-sync
  # fi
  # echo -e "\n\n"

  ## Check available disk space in gigabytes
  if free_disk_space 10; then
    echo "CHECK: You have at least 10gb available space."
  else
    echo "ERROR: You need to have 10gb available space."
  fi

  # Check out a copy of this repo (first time only) ##
  if [ -d "$CIG_SDK_DIR" ]; then
    if [ -d "$CIG_SDK_DIR/.git" ]; then
      echo "Updating pre-existing cig-sdk repo..."
      cd "$CIG_SDK_DIR" || exit
      # Remove any local changes and update to origin
      git reset HEAD --hard && git pull origin HEAD
    else
      # On OSX Sierra /usr/local is not owned by admin user and we can't just clone over there
      echo "Checking out cig-sdk repo... ( This needs sudo permissions )"
      sudo git clone https://github.com/$REPO.git "$CIG_SDK_DIR"

      # Check that cig-sdk folder has right permissions
      sudo chown -R "$USER":"$(id -gn)" "$CIG_SDK_DIR"
    fi
  fi

  # Link cig-sdk app to cig if not installed already via Brew
  if [ -e "/usr/local/bin/cig" ]; then
    ln -s "$CIG_SDK_DIR/bin/cig-sdk" "/usr/local/bin/cig"
  fi

  echo 'Handing Playbook to Ansible (will require your sudo password)...'
  echo -e "\n"

  # Continue with cig-sdk setup
  cd "$CIG_SDK_DIR/ansible/" || exit
  ansible-playbook mac.yml -i 127.0.0.1, --ask-become-pass -vvvv --extra-vars "cig_sdk_dir=$CIG_SDK_DIR"

  # Help user to debug usual problems
  echo "If you had any errors you can try reboot your machine and then running this again."
}

main "$@"
exit 0
