#!/usr/bin/env ruby
require 'open3'
require 'yaml'
require 'json'

class DevTool
  VERSION = '0.4.1'
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  cig [options] [COMMAND] [ARGS...]"
  cig -h|--help

Commands:
  build              Build or rebuild services
  cleanup            Deletes docker containers, images and volumes
  create             Create new project
  exec               Run command inside web container
  help               Get help on a command
  kill               Kill containers
  logs               View output from containers
  ps                 List containers
  pull               Pulls service images
  restart            Restart services
  reload             Force recreates all services
  rm                 Remove stopped containers
  run                Run a one-off command
  shell              Open shell inside container
  service            Manage cig-sdk services (nginx and dnsmasq, mail)
  start              Start services
  stop               Stop services
  up                 Create and start containers
  update             Update cig-sdk environment
  version            Show cig-sdk version

HEREDOC

  PROXY_UNMODIFIED_TO_COMPOSE=%w{build kill logs ps pull restart rm start pause unpause}
  PROXY_MODIFIED=%w{up run help stop}
  OTHER_COMMANDS=%w{wait reload cleanup machine update service status shell exec create version self}

  CREATE_HELP='Usage: $ cig create --type=wordpress --components=dustpress --stage=stage.mydomain.com --production=cloud.mydomain.com --theme=ssh://git@domain:/theme.git --sitename=myapp --stage=stage.mydomain.com --production=production.mydomain.com --git=ssh://git@mydomain:/my-app.git'
  
  CIG_SDK_DIR=File.expand_path('..', __dir__)
  CIG_SDK_USER_FILES=File.join(Dir.home,'.cig-sdk')

  def initialize(args)
    # Check if config files exists and is on correct version
    if(!File.exist?("#{CIG_SDK_USER_FILES}/config"))
      puts "Config not found, running setup..."

      send(:self, ['update'])
    end

    if PROXY_UNMODIFIED_TO_COMPOSE.include?(args[0])
      system(args.unshift("docker-compose").join(" "))
    elsif PROXY_MODIFIED.include?(args[0])
      send(args[0].to_sym, args)
    elsif OTHER_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      puts MAIN_HELP_BANNER
    end
  end

  def version(args)
    puts "CIG SDK #{VERSION}"
  end

  # Show docker-compose command helpers for original commands
  def help(args)
    if args.size > 1
      if (PROXY_UNMODIFIED_TO_COMPOSE.include?(args[1]) or PROXY_MODIFIED.include?(args[1]))
        args.unshift("docker-compose")
        system(args.join(" "))
      elsif OTHER_COMMANDS.include?(args[1])
        puts("This is a cig-sdk custom command and not part of docker-compose. See wiki for explanation.")
      end
    else
      puts MAIN_HELP_BANNER
    end
  end

  def stop(args)
    # if RUBY_PLATFORM.include? "darwin"
    #   # Stop Docker-Sync
    #   system("docker-sync stop")
    # end

    args.unshift("docker-compose")
    system(args.join(" "))
  end

  def run(args)
    args.insert(1, "--rm")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  def reload(args)
    service(["up"])

    args.unshift("-d")
    args.unshift("--force-recreate")
    args.unshift("up")
    args.unshift("docker-compose")

    system(args.join(" "))

  end

  def cleanup(args)

    if args.include?('--images')

        puts "Removing all unused docker images..."
        images = `docker images -q`.gsub("\n",' ')

        system "docker rmi #{images}" if $?.success? and not images.empty?

    elsif args.empty?

        puts "Removing exited docker containers..."

        containers = `docker ps -a -q -f status=exited`.gsub("\n",' ')

        system "docker rm -v #{containers}" if $?.success? and not containers.empty?

        puts "Removing dangling docker images..."

        images = `docker images -f 'dangling=true' -q`.gsub("\n",' ')

        system "docker rmi #{images}" if $?.success? and not images.empty?

        puts "Removing dangling docker volumes..."

        volumes = `docker volume ls -qf dangling=true`.gsub("\n",' ')

        system "docker volume rm #{volumes}" if $?.success? and not volumes.empty?

    end

  end

  def up(args)
    service(["up"])
    # if RUBY_PLATFORM.include? "darwin"
    #   # Start Docker-Sync
    #   system("docker-sync start")
    # end

    args.insert(1, "-d")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  # open shell into container, default to web and bash
  def shell(args)
    if(!args[0])
        target = 'web'
        to = 'bash'
    else
        target = args[0]
        to = args[1]
    end
    container=`docker-compose ps -q #{target}`.strip
    system("docker exec -it #{container} #{to}")
  end

  # Run command in web container
  def exec(args)
    container=`docker-compose ps -q web`.strip
    system "docker exec -it #{container} #{args.join(' ')}"
  end

  # Updating is just running bootstrap again with newer bootstrap bin
  # def update(args)
  #   if (args[0] == "dns")

  #     if RUBY_PLATFORM.include? "linux"
  #       system("ansible-playbook #{CIG_SDK_DIR}/ansible/ubuntu.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns")
  #     else
  #       system("ansible-playbook #{CIG_SDK_DIR}/ansible/mac.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns")
  #     end

  #   elsif (args[0].nil?)

  #     if RUBY_PLATFORM.include? "linux"
  #       system("cd #{CIG_SDK_DIR} && git reset HEAD --hard && git pull origin HEAD && setup/ubuntu")
  #     else
  #       system("cd #{CIG_SDK_DIR} && git reset HEAD --hard && git pull origin HEAD && setup/bootstrap")
  #     end
  #     # Rebuild and reload all services
  #     puts "Refreshing all cig-sdk services..."
  #     service(['build nginx'])
  #     service(['reload'])

  #   else
  #     puts "Did you mean to run: $ cig update ?"
  #   end
  # end

  def service(args)
    if (args[0] == "reload")
      args[0] = "up"
      args.push("--force-recreate")
    end
    if (args[0] == "up")
      args.push("-d")
    elsif (args[0].nil?)
      no_command_given = true
    end
    args.unshift("docker-compose", "-f #{CIG_SDK_DIR}/docker/services.yml", "-p cig")
    
    # If linux, set ip, otherwise assume user is on mac os x
    if RUBY_PLATFORM.include? "linux"
      box_ip="172.17.0.1"
    else
      box_ip="10.254.254.254"
    end

    # Set system variables which we can use in our templates
    system({"BOX_IP" => box_ip},args.join(" "))

    # Tell about custom commands if help view was shown
    if (no_command_given)
      puts "  reload             Force updates all service containers"
    end
  end

  # Syntactic sugar for: $ cig ps
  # I want this to look like vagrant binary
  def status(args)
    system("docker-compose ps")
  end

  def self(args)    
    if (args[0] == "update")
      if (args[1] == "dns")
        if RUBY_PLATFORM.include? "linux"
          system("ansible-playbook #{CIG_SDK_DIR}/ansible/ubuntu.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns")
        else
          system("ansible-playbook #{CIG_SDK_DIR}/ansible/mac.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns")
        end

      elsif (args[1].nil?)        
        if RUBY_PLATFORM.include? "linux"
          system("cd #{CIG_SDK_DIR} && setup/ubuntu --cig-sdk #{CIG_SDK_DIR}")
        else
          system("cd #{CIG_SDK_DIR} && setup/bootstrap --cig-sdk #{CIG_SDK_DIR}")
        end
        # Rebuild and reload all services
        puts "Refreshing all cig-sdk services..."
        service(['build nginx'])
        service(['reload'])

      else
        puts "Did you mean to run: $ cig self update ?"
      end
    else
      puts "Did you mean to run: $ cig self ?"
    end
  end
  
  # Create new project command (validate arguments and start creating app or use wizard)
  def create(args)
    # validate arguments

    # got arguments
    unless args.empty?
      # TODO: parse_args method
      required_args = ['sitename', 'type']
      # loop given arguments
      used_args = []
      args_hash = Hash.new
      args.each { |argument|
        arg = argument.split('=')
        if arg.length == 2
          # every argument has value, check for required args

          # split argument to key value pair
          key = arg[0]
          val = arg[1]

          # remove all dashes from beginning of key
          key.sub! /\A-+/, ''
          # check for duplicate arguments
          if used_args.include?(key)
            puts "Duplicate arguments"
            puts CREATE_HELP
            exit
          else
            # keep track of used arguments
            used_args.push(key)
            
            # TODO: validate sitename (only lowercase chars, dashes or numbers)

            # set key and value to hash
            args_hash[key]=val
          end

          if required_args.include?(key)
            required_args.delete(key)
          end

        else
          # argument value missing, exit script and show help
          puts 'Argument '+arg[0]+' needs value'
          puts CREATE_HELP
          exit
        end
      }

      if required_args.length == 0
        # all required arguments given, proceed
      else
        # required arguments missing, exit script and show help
        puts "Arguments required:"
        puts required_args
        puts CREATE_HELP
        exit
      end

      # start creating project
      create_app(args_hash)

    else
      # no arguments given, start wizard
      create_wizard()

    end

  end

  # Create new site
  def create_app(args)

    unless validate_string(args['sitename'])
      puts "Sitename not valid."
      puts CREATE_HELP
      exit
    end

    puts "Creating project "+args['sitename']+"..."

    #puts args.inspect

    themename=args['sitename'].tr('-','');

    case args['type']
    when "wordpress"
      # setup wordpress project
      # check if project directory already exists
      unless Dir.exists?(args['sitename'])
        # clone wp-project from github
        puts "Cloning wp-project from git@github.com:devgeniem/wp-project.git to #{args['sitename']}..."
        puts `git clone git@github.com:devgeniem/wp-project.git #{args['sitename']}`
        if args['theme']
          puts "Cloning theme from #{args['theme']}..."
          puts `git clone #{args['theme']} #{args['sitename']}/web/app/themes/#{themename}`
          puts "Removing .git directory from theme..."
          `rm -rf #{args['sitename']}/web/app/themes/#{themename}/.git`
          puts ""
        else
          # TODO: get default theme url from ~/.cig-sdk/config.yml
          # do not get theme if default is not set
          puts "TODO"
          puts "Cloning default theme if set ~/.cig-sdk/config.yml"
        end
        # check which components to install if any
        if args['components']
          components_array=args['components'].split(',')
          components_array.each { |component|
            case component
            when 'dustpress'
              # require dustpress components
              puts "Installing dustpress, dustpress-debugger and dustpress-js with composer..."
              puts `cd #{args["sitename"]}; composer require devgeniem/dustpress:1.* devgeniem/dustpress-debugger:1.* devgeniem/dustpress-js:*`
            else
              puts "Component "+component+" not supported."
            end
          }
        end
        # replace all THEMENAME (namespace) references from all files from this project to your project name
        puts "Replacing 'THEMENAME' strings from all project files with '#{args['sitename']}'..."
        themename_file_names = [
          "#{args['sitename']}/.drone.yml", 
          "#{args['sitename']}/config/application.php",
          "#{args['sitename']}/docker-compose.yml",
          "#{args['sitename']}/web/app/themes/#{themename}/lib/extras.php",
          "#{args['sitename']}/web/app/themes/#{themename}/lib/images.php",
          "#{args['sitename']}/web/app/themes/#{themename}/lib/setup.php",
          "#{args['sitename']}/web/app/themes/#{themename}/package.json",
          "#{args['sitename']}/web/app/themes/#{themename}/style.css"
        ]

        themename_file_names.each do |file_name|
          text = File.read(file_name)
          # remove dashes from namespace strings
          new_contents = text.gsub(/THEMENAME/, "#{args['sitename'].tr('-','')}")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end

        # replace PROJECTNAME references 
        puts "Replacing 'PROJECTNAME' strings with '#{args['sitename']}'..."
        projectname_file_names = [
          "#{args['sitename']}/docker-compose.yml"
        ]
        # Add one additional replace to the array.
        # if RUBY_PLATFORM.include? "darwin"
        #   projectname_file_names.insert(-1, "#{args['sitename']}/docker-sync.yml")
        # end
        projectname_file_names.each do |file_name|
          text = File.read(file_name)
          new_contents = text.gsub(/PROJECTNAME/, "#{args['sitename']}")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end

        puts "Replacing 'themename-textdomain' strings from all project files with '#{args['sitename'].downcase}-td'..."
        textdomain_file_names = [
          "#{args['sitename']}/web/app/themes/#{themename}/lib/setup.php",
          "#{args['sitename']}/web/app/themes/#{themename}/style.css"
        ]
        textdomain_file_names.each do |file_name|
          text = File.read(file_name)
          new_contents = text.gsub(/themename-textdomain/, "#{args['sitename'].downcase}-td")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end
        puts "Replacing 'wordpress.test' strings from all project files with '#{args['sitename'].downcase}.test'..."
        wordpresstest_file_names = [
          "#{args['sitename']}/.drone.yml",
          "#{args['sitename']}/docker-compose.yml",
          "#{args['sitename']}/scripts/seed.sh"
        ]
        wordpresstest_file_names.each do |file_name|
          text = File.read(file_name)
          new_contents = text.gsub(/wordpress.test/, "#{args['sitename'].downcase}.test")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end

        # change project test address in docker-compose.yml for example wordpress.test -> client-name.test
        #docker_compose = File.read("#{args['sitename']}/docker-compose.yml")
        #docker_compose_replace = docker_compose.gsub(/wordpress.test/, "#{args['sitename']}.test")
        #File.open("#{args['sitename']}/docker-compose.yml", "w") {|file| file.puts docker_compose_replace }

        # TODO: Add all people working in the project into authors section of composer.json and rename the project devgeniem/wp-project->devgeniem/client in composer.json
        
        # composer install
        #puts "Running composer install..."
        #puts `cd #{args["sitename"]}; composer install`
        puts "Running composer update..."
        puts `cd #{args["sitename"]}; composer update`

        # install theme npm modules
        if args['npm_install']
          puts "Installing theme node modules..."
          puts `cd #{args["sitename"]}/web/app/themes/#{themename}; npm install`
          puts ""
        end
        
        # set git repository
        if args['git'] == ""
          puts "NO GIT REPOSITORY GIVEN!"
        puts `cd #{args["sitename"]}; git remote rm origin`
        else
          puts "Changing git remote to #{args['git']}..."
          puts `cd #{args["sitename"]}; git remote set-url origin #{args["git"]}`
        end
        puts ""

        # cig up
        puts "Running cig up..."
        puts `cd #{args["sitename"]}; cig up`
        puts ""

        # running seed
        if args['run_seed']
          puts "Waiting for 10 seconds to be sure that docker instances are up and running..."
          sleep(10)
          puts ""
          puts "Running seed (Installing WordPress)..."
          puts `cd #{args["sitename"]}; cig exec scripts/seed.sh`
          puts ""
        end

        puts "Point your browser to https://#{args['sitename'].downcase}.test/wp-admin and log in"

        # TODO: help for setting up stage and production
        puts ""
        puts "To create stage environment run:"
        puts "$ flynn -c stage create #{args['sitename'].downcase} --remote=\"\""
        puts ""
        puts "Add mysql and redis resources for project:"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} resource add mysql"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} resource add redis"
        puts ""
        puts "Set environment variables:"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} env set WP_ENV=staging"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} env set WP_HOME=https://#{args['sitename'].downcase}.#{args['stage']}"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} env set WP_SITEURL=https://#{args['sitename'].downcase}.#{args['stage']}"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} env set SERVER_NAME=#{args['sitename'].downcase}.#{args['stage']}"
        puts ""
        puts "Set other environment variables as needed (eg. SMTP_HOST, SMTP_USER etc)"
        puts "Refer to your (company) specific documentation for more settings to set up"
        puts ""
        puts "To deploy your project to stage cluster, go to project directory root and run:"
        puts "$ docker build --pull -t devgeniem/#{args['sitename'].downcase} ."
        puts "$ flynn -c stage -a #{args['sitename'].downcase} docker push devgeniem/#{args['sitename'].downcase}"
        puts ""
        puts "Scale cluster as needed:"
        puts "$ flynn -c stage -a #{args['sitename'].downcase} scale app=1"
        puts ""
        puts "More help with Flynn, visit: https://flynn.io/docs/basics"
      else
        puts "Directory "+args['sitename'].downcase+" exists, please use another sitename."
        puts CREATE_HELP

        exit
      end


    when "nodejs"
      # setup nodejs project
      puts "nodejs project not implemented yet."
    when "silverbullet"
      # setup silverbullet project
      puts "silverbullet project not implemented yet."
    else
      puts "Type "+args['type']+" not supported."
    end

  end

  # validate string (alphanumeric chars and -)
  def validate_string(string)
    !string.match(/\A[-a-zA-Z0-9]*\z/).nil?
  end

  def get_defaults(type)
    defaults = Hash.new
    if File.exist?(ENV['HOME']+'/.cig-sdk/config.yml')
      config = YAML.load(File.read(ENV['HOME']+"/.cig-sdk/config.yml"))
      defaults = config['create']['defaults'][type]
    end
    return defaults
  end

  def create_wizard()
    # load default values
    defaults = get_defaults('wordpress')
    default_marker = "[default]"
    project = Hash.new
    puts "----------------------= Create new project =---------------------"

    puts "Sitename (CamelCase alphanumeric string, dashes allowed):"
    project['sitename']=gets.chomp
    unless validate_string(project['sitename'])
      puts "Sitename (CamelCase alphanumeric string, dashes allowed):"
      project['sitename']=gets.chomp
    end
    puts ""
    puts "Project type (wordpress"+default_marker+", nodejs, silverbullet):"
    project['type']=gets.chomp
    # wordpress specific settings
    if ['','wordpress'].include?(project['type'])
      # show selected default value
      if project['type'] == ""
        project['type']="wordpress"
        puts "wordpress"
      end
      puts ""
      puts "Components (dustpress):"
      project['components']=gets.chomp
      puts ""
      if (defaults['theme'])
        puts "Theme repository address ("+defaults['theme']+default_marker+"):"
      else
        puts "Theme repository address (git@domain/theme.git):"
      end
      project['theme']=gets.chomp
      if project['theme'] == '' and defaults['theme']
        project['theme']=defaults['theme']
        puts defaults['theme']
      else
      end
      puts ""
    end
    # run npm install in theme directory?
    # TODO: default value
    puts "Run npm install in theme directory after setup? (Y/N)"
    npm_install=gets.chomp
    if ['Y','y'].include?(npm_install)
      project['npm_install']=true
    else
      project['npm_install']=false
    end
    puts ""
    # run seed after setup?
    puts "Run seed after installation? (Y/N)"
    run_seed=gets.chomp
    if ['Y','y'].include?(run_seed)
      project['run_seed']=true
    else
      project['run_seed']=false
    end
    puts ""
    # set stage cluster domain
    if defaults['stage']
      puts "Flynn stage cloud address ("+defaults['stage']+default_marker+"):"
    else
      puts "Flynn stage cloud address (stage.mydomain.com):"
    end
    project['stage']=gets.chomp
    if project['stage'] == '' and defaults['stage']
      project['stage']=defaults['stage']
      puts defaults['stage']
    else
      puts '-- not set --'
    end
    puts ""
    # set production cluster domain
    if defaults['production']
      puts "Flynn production cloud address ("+defaults['production']+default_marker+"):"
    else
      puts "Flynn production cloud address (production.mydomain.com):"
    end
    project['production']=gets.chomp
    if project['production'] == '' and defaults['production']
      project['production']=defaults['production']
      puts defaults['production']
    else
      puts '-- not set --'
    end
    puts ""

    puts "Project git repository, ssh or https (ssh://git@domain/my-app.git):"
    project['git']=gets.chomp
    
    puts ""
    puts "------------------------= Confirm input =------------------------"
    project.each { |key,val|
      puts key+": "+val.to_s
    }
    puts "-----= Enter Y to create project, something else to cancel =-----"
    puts ""
    confirm = gets.chomp
    puts ""
    if ['Y','y'].include?(confirm)
      create_app(project)
    else
      puts "Cancelled."
    end

    exit
  end
end

DevTool.new(ARGV) if __FILE__==$0
