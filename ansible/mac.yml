---
- hosts: 127.0.0.1
  connection: local

  vars:
    cig_sdk_dir: /usr/local/cig-sdk
    cig_sdk_user_files: "{{ansible_env.HOME}}/.cig-sdk"

    # This is alias for localhost loopback so that containers can connect to software running in osx ports
    cig_sdk_docker_host_ip: 10.254.254.254

  tasks:
    # Check if Docker is installed
    - name: Check if Docker is installed
      stat:
        path: /usr/local/bin/docker
      register: docker_installed
    # Install Docker if not found
    - name: Install Docker for Mac
      homebrew_cask:
        name: docker
        state: present
      when: not docker_installed.stat.exists
    # Check if Python is installed
    - name: Check that Python is installed
      stat:
        path: /usr/local/bin/python3
      register: python_installed
    # Install Python if not found
    - name: Install python
      homebrew:
        name: python
        state: present
      when: not python_installed.stat.exists
    # Check if PIP is installed
    - name: Check that pip is installed
      stat:
        path: /usr/local/bin/pip
      register: pip_installed
    # Install PIP if not found
    - name: Install pip
      easy_install:
        name: pip
        state: latest
      become: yes
      when: not pip_installed.stat.exists
    # Directory permissions
    - name: Check cig-sdk directory permissions
      file:
        path: "{{cig_sdk_dir}}"
        state: directory
        owner: "{{ansible_env.USER}}"
        group: "staff"
        recurse: yes
        mode: 0755
      # If this was somehow root owned make sure it's not anymore
      become: yes
    - name: Create cig-sdk directories
      file:
        path: "{{ansible_env.HOME}}/.cig-sdk"
        state: directory
        owner: "{{ansible_env.USER}}"
        group: "staff"
        recurse: yes
        mode: 0755
      # If this was somehow root owned make sure it's not anymore
      become: yes
    - name: Symlink cig-sdk bin to PATH
      file:
        src: "{{cig_sdk_dir}}/bin/cig-sdk"
        dest: /usr/local/bin/cig
        state: link
      tags: ["pre-install"]
    - name: Check that host ip looback is running
      command: "ifconfig lo0 alias {{ cig_sdk_docker_host_ip }}"
      become: yes
    - name: Ensure host ip looback after reboots
      template:
        src: templates/com.cig_sdk.docker_ip_alias.plist.j2
        dest: /Library/LaunchDaemons/com.cig_sdk.docker_loopback_alias.plist
        owner: root
        group: wheel
        mode: 0644
      become: yes
    - name: Add localunixsocket.local hostname in /etc/hosts
      blockinfile:
        dest: /etc/hosts
        marker: "# {mark}: cig-sdk prevent docker for OSX from slowing in certain networks"
        block: |
          127.0.0.1 localunixsocket
          127.0.0.1 localunixsocket.lan
          127.0.0.1 localunixsocket.local
      tags: ["hosts"]
      become: yes
    - name: Start docker for mac
      command: "open -a docker"
    - name: "Check that we have /var/run/docker.sock socket"
      wait_for:
        path: /var/run/docker.sock
        state: present
        timeout: 20
    - name: "Check that we have /var/run/docker.sock socket"
      stat:
        path: /var/run/docker.sock
      register: docker_socket
    - name: Fail if no docker.sock
      fail:
        msg: "Check that Docker for Mac is enabled! /var/run/docker.sock is not mounted. :("
      when: not docker_socket.stat.exists
    - name: Start or reload cig-sdk services
      command: "{{ cig_sdk_dir }}/bin/cig-sdk service up --build --force-recreate"
    - name: Wait for signaler to create CA file
      wait_for:
        path: "{{ cig_sdk_user_files }}/ca/ca.crt"
        state: present
        timeout: 30
    # This only works in OS X and doesn't affect firefox
    # We want to use https locally and you only use ca.key which is generated to you
    - name: Trust self-generated signaler Root certificate in keychain
      shell: "security add-trusted-cert -d -r trustRoot -k '/Library/Keychains/System.keychain' ca.crt"
      args:
        chdir: "{{ cig_sdk_user_files }}/ca/"
      become: yes
      become_method: sudo
    - name: Create resolver directory
      file:
        path: /etc/resolver
        state: directory
        mode: 0755
      become: yes
      become_method: sudo
      tags: ["dns"]
    - name: Delete resolver files to trigger dns change
      file:
        path: "/etc/resolver/{{item.domain}}"
        state: absent
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ cig_sdk_docker_host_ip }}", domain: test }
      tags: ["dns"]
    - name: Create dns resolver files at /etc/resolver/
      template:
        src: "templates/resolver-dev.conf.j2"
        dest: "/etc/resolver/{{item.domain}}"
        force: yes
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ cig_sdk_docker_host_ip }}", domain: test }
      tags: ["dns"]
